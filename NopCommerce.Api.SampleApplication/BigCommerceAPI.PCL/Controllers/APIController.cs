/*
 * BigCommerceAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 04/27/2020
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BigCommerceAPI.PCL;
using BigCommerceAPI.PCL.Utilities;
using BigCommerceAPI.PCL.Http.Request;
using BigCommerceAPI.PCL.Http.Response;
using BigCommerceAPI.PCL.Http.Client;
using BigCommerceAPI.PCL.Exceptions;
using BigCommerceAPI.PCL.Models;

namespace BigCommerceAPI.PCL.Controllers
{
    public partial class APIController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static APIController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static APIController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new APIController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Returns a paginated collection of `Products` objects from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Optional parameter: Filter items by `brand_id`.</param>
        /// <param name="categories">Optional parameter: Filter items by categories.</param>
        /// <param name="condition">Optional parameter: Filter items by condition.</param>
        /// <param name="dateLastImported">Optional parameter: Filter items by `date_last_imported`.</param>
        /// <param name="dateModified">Optional parameter: Filter items by `date_modified`.</param>
        /// <param name="include">Optional parameter: Include sub-resources on a product, using a comma-separated list. Valid expansions currently include `variants`, `images`, `custom_fields`, and `bulk_pricing_rules`.</param>
        /// <param name="inventoryLevel">Optional parameter: Filter items by `inventory_level`.</param>
        /// <param name="isFeatured">Optional parameter: Filter items by `is_featured`.</param>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="price">Optional parameter: Filter items by price.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <param name="totalSold">Optional parameter: Filter items by `total_sold`.</param>
        /// <param name="type">Optional parameter: Filter items by type.</param>
        /// <param name="weight">Optional parameter: Filter items by weight.</param>
        /// <return>Returns the ProductCollectionResponse response from the API call</return>
        public ProductCollectionResponse GetProducts(
                int? brandId = null,
                int? categories = null,
                int? condition = null,
                int? dateLastImported = null,
                int? dateModified = null,
                string include = null,
                int? inventoryLevel = null,
                int? isFeatured = null,
                int? isVisible = null,
                int? keyword = null,
                int? limit = null,
                string name = null,
                int? page = null,
                double? price = null,
                string sku = null,
                int? totalSold = null,
                int? type = null,
                double? weight = null)
        {
            Task<ProductCollectionResponse> t = GetProductsAsync(brandId, categories, condition, dateLastImported, dateModified, include, inventoryLevel, isFeatured, isVisible, keyword, limit, name, page, price, sku, totalSold, type, weight);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a paginated collection of `Products` objects from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Optional parameter: Filter items by `brand_id`.</param>
        /// <param name="categories">Optional parameter: Filter items by categories.</param>
        /// <param name="condition">Optional parameter: Filter items by condition.</param>
        /// <param name="dateLastImported">Optional parameter: Filter items by `date_last_imported`.</param>
        /// <param name="dateModified">Optional parameter: Filter items by `date_modified`.</param>
        /// <param name="include">Optional parameter: Include sub-resources on a product, using a comma-separated list. Valid expansions currently include `variants`, `images`, `custom_fields`, and `bulk_pricing_rules`.</param>
        /// <param name="inventoryLevel">Optional parameter: Filter items by `inventory_level`.</param>
        /// <param name="isFeatured">Optional parameter: Filter items by `is_featured`.</param>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="price">Optional parameter: Filter items by price.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <param name="totalSold">Optional parameter: Filter items by `total_sold`.</param>
        /// <param name="type">Optional parameter: Filter items by type.</param>
        /// <param name="weight">Optional parameter: Filter items by weight.</param>
        /// <return>Returns the ProductCollectionResponse response from the API call</return>
        public async Task<ProductCollectionResponse> GetProductsAsync(
                int? brandId = null,
                int? categories = null,
                int? condition = null,
                int? dateLastImported = null,
                int? dateModified = null,
                string include = null,
                int? inventoryLevel = null,
                int? isFeatured = null,
                int? isVisible = null,
                int? keyword = null,
                int? limit = null,
                string name = null,
                int? page = null,
                double? price = null,
                string sku = null,
                int? totalSold = null,
                int? type = null,
                double? weight = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId },
                { "categories", categories },
                { "condition", condition },
                { "date_last_imported", dateLastImported },
                { "date_modified", dateModified },
                { "include", include },
                { "inventory_level", inventoryLevel },
                { "is_featured", isFeatured },
                { "is_visible", isVisible },
                { "keyword", keyword },
                { "limit", limit },
                { "name", name },
                { "page", page },
                { "price", price },
                { "sku", sku },
                { "total_sold", totalSold },
                { "type", type },
                { "weight", weight }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Auth-Client", Configuration.XAuthClient },
                { "X-Auth-Token", Configuration.XAuthToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates a `Product` in the BigCommerce Catalog
        /// </summary>
        /// <param name="product">Required parameter: A BigCommerce `Product` object</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public ProductResponse CreateProduct(ProductPost product)
        {
            Task<ProductResponse> t = CreateProductAsync(product);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates a `Product` in the BigCommerce Catalog
        /// </summary>
        /// <param name="product">Required parameter: A BigCommerce `Product` object</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public async Task<ProductResponse> CreateProductAsync(ProductPost product)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(product);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"`Product` was in conflict with another product. This is the result of duplicate unique values, such as `name` or `sku`; a missing or invalid `category_id`, `brand_id`, or `tax_class` ID; or a conflicting `bulk_pricing_rule`. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"`Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes one or more `Product` objects from the BigCommerce Catalog
        /// </summary>
        /// <param name="brandId">Optional parameter: Filter items by `brand_id`.</param>
        /// <param name="categories">Optional parameter: Filter items by categories.</param>
        /// <param name="condition">Optional parameter: Filter items by condition.</param>
        /// <param name="dateLastImported">Optional parameter: Filter items by `date_last_imported`.</param>
        /// <param name="dateModified">Optional parameter: Filter items by `date_modified`.</param>
        /// <param name="inventoryLevel">Optional parameter: Filter items by `inventory_level`.</param>
        /// <param name="isFeatured">Optional parameter: Filter items by `is_featured`.</param>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="price">Optional parameter: Filter items by price.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <param name="totalSold">Optional parameter: Filter items by `total_sold`.</param>
        /// <param name="type">Optional parameter: Filter items by type.</param>
        /// <param name="weight">Optional parameter: Filter items by weight.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteProducts(
                int? brandId = null,
                int? categories = null,
                int? condition = null,
                int? dateLastImported = null,
                int? dateModified = null,
                int? inventoryLevel = null,
                int? isFeatured = null,
                int? isVisible = null,
                int? keyword = null,
                string name = null,
                double? price = null,
                string sku = null,
                int? totalSold = null,
                int? type = null,
                double? weight = null)
        {
            Task t = DeleteProductsAsync(brandId, categories, condition, dateLastImported, dateModified, inventoryLevel, isFeatured, isVisible, keyword, name, price, sku, totalSold, type, weight);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes one or more `Product` objects from the BigCommerce Catalog
        /// </summary>
        /// <param name="brandId">Optional parameter: Filter items by `brand_id`.</param>
        /// <param name="categories">Optional parameter: Filter items by categories.</param>
        /// <param name="condition">Optional parameter: Filter items by condition.</param>
        /// <param name="dateLastImported">Optional parameter: Filter items by `date_last_imported`.</param>
        /// <param name="dateModified">Optional parameter: Filter items by `date_modified`.</param>
        /// <param name="inventoryLevel">Optional parameter: Filter items by `inventory_level`.</param>
        /// <param name="isFeatured">Optional parameter: Filter items by `is_featured`.</param>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="price">Optional parameter: Filter items by price.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <param name="totalSold">Optional parameter: Filter items by `total_sold`.</param>
        /// <param name="type">Optional parameter: Filter items by type.</param>
        /// <param name="weight">Optional parameter: Filter items by weight.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteProductsAsync(
                int? brandId = null,
                int? categories = null,
                int? condition = null,
                int? dateLastImported = null,
                int? dateModified = null,
                int? inventoryLevel = null,
                int? isFeatured = null,
                int? isVisible = null,
                int? keyword = null,
                string name = null,
                double? price = null,
                string sku = null,
                int? totalSold = null,
                int? type = null,
                double? weight = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId },
                { "categories", categories },
                { "condition", condition },
                { "date_last_imported", dateLastImported },
                { "date_modified", dateModified },
                { "inventory_level", inventoryLevel },
                { "is_featured", isFeatured },
                { "is_visible", isVisible },
                { "keyword", keyword },
                { "name", name },
                { "price", price },
                { "sku", sku },
                { "total_sold", totalSold },
                { "type", type },
                { "weight", weight }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a `Product` from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public ProductResponse GetProductById(double productId)
        {
            Task<ProductResponse> t = GetProductByIdAsync(productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a `Product` from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public async Task<ProductResponse> GetProductByIdAsync(double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates a `Product` in the BigCommerce Catalog.
        /// </summary>
        /// <param name="product">Required parameter: A BigCommerce `Product` object.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public ProductResponse UpdateProduct(Product product, double productId)
        {
            Task<ProductResponse> t = UpdateProductAsync(product, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Updates a `Product` in the BigCommerce Catalog.
        /// </summary>
        /// <param name="product">Required parameter: A BigCommerce `Product` object.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the ProductResponse response from the API call</return>
        public async Task<ProductResponse> UpdateProductAsync(Product product, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(product);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 409)
                throw new APIException(@"`Product` was in conflict with another product. This is the result of duplicate unique values, such as `name` or `sku`; a missing `category_id`, `brand_id`, or `tax_class_id` associated with the product; or a conflicting bulk pricing rule. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"`Product` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a `Product` object from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteProductById(double productId)
        {
            Task t = DeleteProductByIdAsync(productId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes a `Product` object from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteProductByIdAsync(double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Gets all images on a product. 
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the ProductImageCollectionResponse response from the API call</return>
        public ProductImageCollectionResponse GetProductImages(int productId)
        {
            Task<ProductImageCollectionResponse> t = GetProductImagesAsync(productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets all images on a product. 
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the ProductImageCollectionResponse response from the API call</return>
        public async Task<ProductImageCollectionResponse> GetProductImagesAsync(int productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/images/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductImageCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates an image on a product. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <param name="productImage">Required parameter: A BigCommerce `ProductImage` object.</param>
        /// <return>Returns the ProductImageResponse response from the API call</return>
        public ProductImageResponse CreateProductImage(int productId, ProductImage productImage)
        {
            Task<ProductImageResponse> t = CreateProductImageAsync(productId, productImage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates an image on a product. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <param name="productImage">Required parameter: A BigCommerce `ProductImage` object.</param>
        /// <return>Returns the ProductImageResponse response from the API call</return>
        public async Task<ProductImageResponse> CreateProductImageAsync(int productId, ProductImage productImage)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/images/");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(productImage);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductImageResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Gets image on a product. 
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the ProductImageCollectionResponse response from the API call</return>
        public ProductImageCollectionResponse GetProductImageById(int imageId, int productId)
        {
            Task<ProductImageCollectionResponse> t = GetProductImageByIdAsync(imageId, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets image on a product. 
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the ProductImageCollectionResponse response from the API call</return>
        public async Task<ProductImageCollectionResponse> GetProductImageByIdAsync(int imageId, int productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/images/{image_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "image_id", imageId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductImageCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates an image on a product. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <param name="productImage">Required parameter: A BigCommerce `ProductImage` object.</param>
        /// <return>Returns the ProductImageResponse response from the API call</return>
        public ProductImageResponse UpdateProductImage(int imageId, int productId, ProductImage productImage)
        {
            Task<ProductImageResponse> t = UpdateProductImageAsync(imageId, productId, productImage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Updates an image on a product. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <param name="productImage">Required parameter: A BigCommerce `ProductImage` object.</param>
        /// <return>Returns the ProductImageResponse response from the API call</return>
        public async Task<ProductImageResponse> UpdateProductImageAsync(int imageId, int productId, ProductImage productImage)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/images/{image_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "image_id", imageId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(productImage);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ProductImageResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a `ProductImage` in the BigCommerce Catalog.
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteProductImage(int imageId, int productId)
        {
            Task t = DeleteProductImageAsync(imageId, productId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes a `ProductImage` in the BigCommerce Catalog.
        /// </summary>
        /// <param name="imageId">Required parameter: The ID of the `Image` being operated on.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the image is being attached.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteProductImageAsync(int imageId, int productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/images/{image_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "image_id", imageId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a `Variant` object list from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <return>Returns the VariantCollectionResponse response from the API call</return>
        public VariantCollectionResponse GetVariantsByProductId(double productId, int? limit = null, int? page = null)
        {
            Task<VariantCollectionResponse> t = GetVariantsByProductIdAsync(productId, limit, page);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a `Variant` object list from the BigCommerce Catalog.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <return>Returns the VariantCollectionResponse response from the API call</return>
        public async Task<VariantCollectionResponse> GetVariantsByProductIdAsync(double productId, int? limit = null, int? page = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "limit", limit },
                { "page", page }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public VariantResponse CreateVariant(double productId, Variant variant)
        {
            Task<VariantResponse> t = CreateVariantAsync(productId, variant);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public async Task<VariantResponse> CreateVariantAsync(double productId, Variant variant)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(variant);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Gets a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public VariantResponse GetProductVariantById(double productId, double variantId)
        {
            Task<VariantResponse> t = GetProductVariantByIdAsync(productId, variantId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public async Task<VariantResponse> GetProductVariantByIdAsync(double productId, double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId },
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Updates a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public VariantResponse UpdateProductVariant(double productId, Variant variant, double variantId)
        {
            Task<VariantResponse> t = UpdateProductVariantAsync(productId, variant, variantId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Updates a `Variant` object.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public async Task<VariantResponse> UpdateProductVariantAsync(double productId, Variant variant, double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId },
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(variant);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete as `Variant`.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteProductVariantById(double productId, double variantId)
        {
            Task t = DeleteProductVariantByIdAsync(productId, variantId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete as `Variant`.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteProductVariantByIdAsync(double productId, double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId },
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Supported MIME types include GIF, JPEG, and PNG.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public void CreateVariantImage(ResourceImage imageFile, double productId, double variantId)
        {
            Task t = CreateVariantImageAsync(imageFile, productId, variantId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Supported MIME types include GIF, JPEG, and PNG.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <param name="variantId">Required parameter: The ID of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateVariantImageAsync(ResourceImage imageFile, double productId, double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/variants/{variant_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId },
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(imageFile);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"Variant image was not valid. This is the result of missing `image_file` fields, or of non-URL values for the `image_file` field. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Gets an array of `Option` objects.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the OptionCollectionResponse response from the API call</return>
        public OptionCollectionResponse GetOptions(double productId)
        {
            Task<OptionCollectionResponse> t = GetOptionsAsync(productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets an array of `Option` objects.
        /// </summary>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the OptionCollectionResponse response from the API call</return>
        public async Task<OptionCollectionResponse> GetOptionsAsync(double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/options");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<OptionCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates an `Option`.
        /// </summary>
        /// <param name="option">Required parameter: `Option` object.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the OptionResponse response from the API call</return>
        public OptionResponse CreateOption(Option option, double productId)
        {
            Task<OptionResponse> t = CreateOptionAsync(option, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates an `Option`.
        /// </summary>
        /// <param name="option">Required parameter: `Option` object.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Variant` belongs.</param>
        /// <return>Returns the OptionResponse response from the API call</return>
        public async Task<OptionResponse> CreateOptionAsync(Option option, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/options");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(option);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"Option was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<OptionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update a Product's `Option`, based on the `product_id` and `option_id`.
        /// </summary>
        /// <param name="optionId">Required parameter: The ID of the `Option`.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Option` belongs.</param>
        /// <return>Returns the OptionResponse response from the API call</return>
        public OptionResponse UpdateOption(int optionId, double productId)
        {
            Task<OptionResponse> t = UpdateOptionAsync(optionId, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update a Product's `Option`, based on the `product_id` and `option_id`.
        /// </summary>
        /// <param name="optionId">Required parameter: The ID of the `Option`.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Option` belongs.</param>
        /// <return>Returns the OptionResponse response from the API call</return>
        public async Task<OptionResponse> UpdateOptionAsync(int optionId, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/options/{option_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "option_id", optionId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"The `Option` was in conflict with another option. This is the result of duplicate unique fields, such as name. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Option` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<OptionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete a Product's `Option` based on the product_id and option_id.
        /// </summary>
        /// <param name="optionId">Required parameter: The ID of the `Option`.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Option` belongs.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteOptionById(int optionId, double productId)
        {
            Task t = DeleteOptionByIdAsync(optionId, productId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete a Product's `Option` based on the product_id and option_id.
        /// </summary>
        /// <param name="optionId">Required parameter: The ID of the `Option`.</param>
        /// <param name="productId">Required parameter: The ID of the `Product` to which the `Option` belongs.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteOptionByIdAsync(int optionId, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/options/{option_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "option_id", optionId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Get an array of `Modifier` objects.
        /// </summary>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierCollectionResponse response from the API call</return>
        public ModifierCollectionResponse GetModifiers(double productId)
        {
            Task<ModifierCollectionResponse> t = GetModifiersAsync(productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get an array of `Modifier` objects.
        /// </summary>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierCollectionResponse response from the API call</return>
        public async Task<ModifierCollectionResponse> GetModifiersAsync(double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ModifierCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a `Modifier`.
        /// </summary>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public ModifierResponse CreateModifier(double productId)
        {
            Task<ModifierResponse> t = CreateModifierAsync(productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a `Modifier`.
        /// </summary>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public async Task<ModifierResponse> CreateModifierAsync(double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"The `Modifier` was in conflict with another option. This is the result of duplicate unique fields such as name. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Modifier` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ModifierResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a `Modifier` by modifier_id
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public ModifierResponse GetModifierById(int modifierId, double productId)
        {
            Task<ModifierResponse> t = GetModifierByIdAsync(modifierId, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a `Modifier` by modifier_id
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public async Task<ModifierResponse> GetModifierByIdAsync(int modifierId, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers/{modifier_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "modifier_id", modifierId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ModifierResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update an Product's `Modifier` based on the product_id and modifier_id.
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public ModifierResponse UpdateModifier(int modifierId, double productId)
        {
            Task<ModifierResponse> t = UpdateModifierAsync(modifierId, productId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update an Product's `Modifier` based on the product_id and modifier_id.
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the ModifierResponse response from the API call</return>
        public async Task<ModifierResponse> UpdateModifierAsync(int modifierId, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers/{modifier_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "modifier_id", modifierId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"The `Modifier` was in conflict with another modifier or option. This is the result of duplicate unique fields such as name. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Modifier` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<ModifierResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete a Product's `Modifier` based on the product_id and modifier_id.
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteModifierById(int modifierId, double productId)
        {
            Task t = DeleteModifierByIdAsync(modifierId, productId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete a Product's `Modifier` based on the product_id and modifier_id.
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteModifierByIdAsync(int modifierId, double productId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers/{modifier_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "modifier_id", modifierId },
                { "product_id", productId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Add an image to a modifier value that will show on the storefront when it’s selected
        /// </summary>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <param name="valueId">Required parameter: The id of the `Modifier Value`</param>
        /// <return>Returns the void response from the API call</return>
        public void CreateModifierImage(
                ResourceImage imageFile,
                int modifierId,
                double productId,
                int valueId)
        {
            Task t = CreateModifierImageAsync(imageFile, modifierId, productId, valueId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Add an image to a modifier value that will show on the storefront when it’s selected
        /// </summary>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <param name="valueId">Required parameter: The id of the `Modifier Value`</param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateModifierImageAsync(
                ResourceImage imageFile,
                int modifierId,
                double productId,
                int valueId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "modifier_id", modifierId },
                { "product_id", productId },
                { "value_id", valueId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(imageFile);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"Modifier image was not valid. This is the result of missing image_file fields or non-url for image_file field. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Delete the image applied to show when the modifier value is selected
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <param name="valueId">Required parameter: The id of the `Modifier Value`</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteModifierImage(int modifierId, double productId, int valueId)
        {
            Task t = DeleteModifierImageAsync(modifierId, productId, valueId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete the image applied to show when the modifier value is selected
        /// </summary>
        /// <param name="modifierId">Required parameter: The id of the `Modifier`</param>
        /// <param name="productId">Required parameter: The id of the `Product` the `Modifier` belongs to.</param>
        /// <param name="valueId">Required parameter: The id of the `Modifier Value`</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteModifierImageAsync(int modifierId, double productId, int valueId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "modifier_id", modifierId },
                { "product_id", productId },
                { "value_id", valueId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a paginated categories collection from the BigCommerce Catalog
        /// </summary>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <param name="parentId">Optional parameter: Filter items by `parent_id`.</param>
        /// <return>Returns the CategoryCollectionResponse response from the API call</return>
        public CategoryCollectionResponse GetCategories(
                int? isVisible = null,
                int? keyword = null,
                int? limit = null,
                string name = null,
                int? page = null,
                string pageTitle = null,
                int? parentId = null)
        {
            Task<CategoryCollectionResponse> t = GetCategoriesAsync(isVisible, keyword, limit, name, page, pageTitle, parentId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a paginated categories collection from the BigCommerce Catalog
        /// </summary>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <param name="parentId">Optional parameter: Filter items by `parent_id`.</param>
        /// <return>Returns the CategoryCollectionResponse response from the API call</return>
        public async Task<CategoryCollectionResponse> GetCategoriesAsync(
                int? isVisible = null,
                int? keyword = null,
                int? limit = null,
                string name = null,
                int? page = null,
                string pageTitle = null,
                int? parentId = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "is_visible", isVisible },
                { "keyword", keyword },
                { "limit", limit },
                { "name", name },
                { "page", page },
                { "page_title", pageTitle },
                { "parent_id", parentId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CategoryCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Creates a `Category` in the BigCommerce Catalog
        /// </summary>
        /// <param name="category">Required parameter: A BigCommerce `Category` object</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public CategoryResponse CreateCategory(Category category)
        {
            Task<CategoryResponse> t = CreateCategoryAsync(category);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Creates a `Category` in the BigCommerce Catalog
        /// </summary>
        /// <param name="category">Required parameter: A BigCommerce `Category` object</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public async Task<CategoryResponse> CreateCategoryAsync(Category category)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(category);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 409)
                throw new APIException(@"The `Category` was in conflict with another category. This is the result of duplicate unique values such as name or custom_url. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Category` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CategoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete a product or products from the BigCommerce Catalog
        /// </summary>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <param name="parentId">Optional parameter: Filter items by `parent_id`.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteCategories(
                int? isVisible = null,
                int? keyword = null,
                string name = null,
                string pageTitle = null,
                int? parentId = null)
        {
            Task t = DeleteCategoriesAsync(isVisible, keyword, name, pageTitle, parentId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete a product or products from the BigCommerce Catalog
        /// </summary>
        /// <param name="isVisible">Optional parameter: Filter items by `is_visible`.</param>
        /// <param name="keyword">Optional parameter: Filter items by keywords found in the name or `page_title`.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <param name="parentId">Optional parameter: Filter items by `parent_id`.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteCategoriesAsync(
                int? isVisible = null,
                int? keyword = null,
                string name = null,
                string pageTitle = null,
                int? parentId = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "is_visible", isVisible },
                { "keyword", keyword },
                { "name", name },
                { "page_title", pageTitle },
                { "parent_id", parentId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a `Variant` object list from the BigCommerce Catalog.
        /// </summary>
        /// <param name="id">Optional parameter: Filter items by sku.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <return>Returns the VariantCollectionResponse response from the API call</return>
        public VariantCollectionResponse GetVariants(
                int? id = null,
                int? limit = null,
                int? page = null,
                string sku = null)
        {
            Task<VariantCollectionResponse> t = GetVariantsAsync(id, limit, page, sku);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a `Variant` object list from the BigCommerce Catalog.
        /// </summary>
        /// <param name="id">Optional parameter: Filter items by sku.</param>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="sku">Optional parameter: Filter items by sku.</param>
        /// <return>Returns the VariantCollectionResponse response from the API call</return>
        public async Task<VariantCollectionResponse> GetVariantsAsync(
                int? id = null,
                int? limit = null,
                int? page = null,
                string sku = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/variants");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "limit", limit },
                { "page", page },
                { "sku", sku }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Get a `Variant` object.
        /// </summary>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public VariantResponse GetVariantById(double variantId)
        {
            Task<VariantResponse> t = GetVariantByIdAsync(variantId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a `Variant` object.
        /// </summary>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public async Task<VariantResponse> GetVariantByIdAsync(double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update a `Variant` object.
        /// </summary>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public VariantResponse UpdateVariant(Variant variant, double variantId)
        {
            Task<VariantResponse> t = UpdateVariantAsync(variant, variantId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update a `Variant` object.
        /// </summary>
        /// <param name="variant">Required parameter: `Variant` object</param>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the VariantResponse response from the API call</return>
        public async Task<VariantResponse> UpdateVariantAsync(Variant variant, double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(variant);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VariantResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete a `Variant`
        /// </summary>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteVariantById(double variantId)
        {
            Task t = DeleteVariantByIdAsync(variantId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete a `Variant`
        /// </summary>
        /// <param name="variantId">Required parameter: The id of the `Variant`.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteVariantByIdAsync(double variantId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/variants/{variant_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "variant_id", variantId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns a `Category` from the BigCommerce Catalog
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public CategoryResponse GetCategoryById(int categoryId)
        {
            Task<CategoryResponse> t = GetCategoryByIdAsync(categoryId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns a `Category` from the BigCommerce Catalog
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public async Task<CategoryResponse> GetCategoryByIdAsync(int categoryId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/{category_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CategoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update a `Category` in the BigCommerce Catalog
        /// </summary>
        /// <param name="category">Required parameter: A BigCommerce `Category` object</param>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public CategoryResponse UpdateCategory(Category category, int categoryId)
        {
            Task<CategoryResponse> t = UpdateCategoryAsync(category, categoryId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update a `Category` in the BigCommerce Catalog
        /// </summary>
        /// <param name="category">Required parameter: A BigCommerce `Category` object</param>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the CategoryResponse response from the API call</return>
        public async Task<CategoryResponse> UpdateCategoryAsync(Category category, int categoryId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/{category_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(category);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 409)
                throw new APIException(@"The `Category` was in conflict with another category. This is the result of duplicate unique values such as name or custom_url. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Category` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CategoryResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete one or more `Category` objects from the BigCommerce catalog.
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteCategoryById(int categoryId)
        {
            Task t = DeleteCategoryByIdAsync(categoryId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete one or more `Category` objects from the BigCommerce catalog.
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` requested</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteCategoryByIdAsync(int categoryId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/{category_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Creates an image on a category. Publicly accessible URLs and files (form post) are valid parameters.
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` the image is being attached to.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public void CreateCategoryImage(int categoryId, ResourceImage imageFile)
        {
            Task t = CreateCategoryImageAsync(categoryId, imageFile);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Creates an image on a category. Publicly accessible URLs and files (form post) are valid parameters.
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` the image is being attached to.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateCategoryImageAsync(int categoryId, ResourceImage imageFile)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/{category_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(imageFile);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Delete a `Category` image the BigCommerce Catalog
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` the image is being attached to.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteCategoryImage(int categoryId, ResourceImage imageFile)
        {
            Task t = DeleteCategoryImageAsync(categoryId, imageFile);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete a `Category` image the BigCommerce Catalog
        /// </summary>
        /// <param name="categoryId">Required parameter: The id of the `Category` the image is being attached to.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Support MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteCategoryImageAsync(int categoryId, ResourceImage imageFile)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/{category_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "category_id", categoryId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(imageFile);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.DeleteBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Returns the categories tree, a nested lineage of the categories with parent->child relationship. The `Category` objects returned are a simplified version of the category objects returned in the rest of this API.
        /// </summary>
        /// <return>Returns the CategoryTreeCollectionResponse response from the API call</return>
        public CategoryTreeCollectionResponse GetCategoryTree()
        {
            Task<CategoryTreeCollectionResponse> t = GetCategoryTreeAsync();
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Returns the categories tree, a nested lineage of the categories with parent->child relationship. The `Category` objects returned are a simplified version of the category objects returned in the rest of this API.
        /// </summary>
        /// <return>Returns the CategoryTreeCollectionResponse response from the API call</return>
        public async Task<CategoryTreeCollectionResponse> GetCategoryTreeAsync()
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/categories/tree");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CategoryTreeCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Gets `Brand` objects.
        /// </summary>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <return>Returns the BrandCollectionResponse response from the API call</return>
        public BrandCollectionResponse GetBrands(
                int? limit = null,
                string name = null,
                int? page = null,
                string pageTitle = null)
        {
            Task<BrandCollectionResponse> t = GetBrandsAsync(limit, name, page, pageTitle);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets `Brand` objects.
        /// </summary>
        /// <param name="limit">Optional parameter: Control the items per page.</param>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="page">Optional parameter: Control the page in a limited list of products.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <return>Returns the BrandCollectionResponse response from the API call</return>
        public async Task<BrandCollectionResponse> GetBrandsAsync(
                int? limit = null,
                string name = null,
                int? page = null,
                string pageTitle = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "limit", limit },
                { "name", name },
                { "page", page },
                { "page_title", pageTitle }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<BrandCollectionResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Create a `Brand` object.
        /// </summary>
        /// <param name="brand">Required parameter: `Brand` object</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public BrandResponse CreateBrand(Brand brand)
        {
            Task<BrandResponse> t = CreateBrandAsync(brand);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Create a `Brand` object.
        /// </summary>
        /// <param name="brand">Required parameter: `Brand` object</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public async Task<BrandResponse> CreateBrandAsync(Brand brand)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(brand);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<BrandResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Delete one or more `Brand` objects from the BigCommerce Catalog
        /// </summary>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBrands(string name = null, string pageTitle = null)
        {
            Task t = DeleteBrandsAsync(name, pageTitle);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Delete one or more `Brand` objects from the BigCommerce Catalog
        /// </summary>
        /// <param name="name">Optional parameter: Filter items by name.</param>
        /// <param name="pageTitle">Optional parameter: Filter items by `page_title`.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteBrandsAsync(string name = null, string pageTitle = null)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "name", name },
                { "page_title", pageTitle }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Gets `Brand` object.
        /// </summary>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public BrandResponse GetBrandById(double brandId)
        {
            Task<BrandResponse> t = GetBrandByIdAsync(brandId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Gets `Brand` object.
        /// </summary>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public async Task<BrandResponse> GetBrandByIdAsync(double brandId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands/{brand_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<BrandResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Update a `Brand` in the BigCommerce Catalog
        /// </summary>
        /// <param name="brand">Required parameter: Returns a `Brand` from the BigCommerce Catalog</param>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public BrandResponse UpdateBrand(Brand brand, double brandId)
        {
            Task<BrandResponse> t = UpdateBrandAsync(brand, brandId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Update a `Brand` in the BigCommerce Catalog
        /// </summary>
        /// <param name="brand">Required parameter: Returns a `Brand` from the BigCommerce Catalog</param>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the BrandResponse response from the API call</return>
        public async Task<BrandResponse> UpdateBrandAsync(Brand brand, double brandId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands/{brand_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(brand);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 409)
                throw new APIException(@"The `Brand` was in conflict with another product. This is the result of duplicate unique value, such as `name`. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Brand` was not valid. This is the result of missing required fields or invalid data. See the response for more details. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<BrandResponse>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Deletes a `Brand` from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBrand(double brandId)
        {
            Task t = DeleteBrandAsync(brandId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes a `Brand` from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Required parameter: The id of the `Brand` requested</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteBrandAsync(double brandId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands/{brand_id}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Creates an image on a `Brand`. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="brandId">Required parameter: The ID of the `Brand` to which the image is being attached.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Supported MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public void CreateBrandImage(int brandId, ResourceImage imageFile)
        {
            Task t = CreateBrandImageAsync(brandId, imageFile);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Creates an image on a `Brand`. Publicly accessible URLs and files (`form post`) are valid parameters.
        /// </summary>
        /// <param name="brandId">Required parameter: The ID of the `Brand` to which the image is being attached.</param>
        /// <param name="imageFile">Required parameter: A publicly accessible URL for an image. Supported MIME types include GIF, JPEG, and PNG.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateBrandImageAsync(int brandId, ResourceImage imageFile)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands/{brand_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "content-type", "application/json; charset=utf-8" }
            };

            //append body params
            var _body = APIHelper.JsonSerialize(imageFile);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 404)
                throw new APIException(@"Error payload for the BigCommerce API. ", _context);

            if (_response.StatusCode == 422)
                throw new APIException(@"The `Brand` image was not valid. ", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Deletes a `Brand` image from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Required parameter: The ID of the `Brand` to which the image is being attached.</param>
        /// <return>Returns the void response from the API call</return>
        public void DeleteBrandImage(int brandId)
        {
            Task t = DeleteBrandImageAsync(brandId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Deletes a `Brand` image from the BigCommerce Catalog.
        /// </summary>
        /// <param name="brandId">Required parameter: The ID of the `Brand` to which the image is being attached.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteBrandImageAsync(int brandId)
        {
            //the base uri for api requestss
            string _baseUri = string.Format(Configuration.BaseUri, Configuration.StoreId);

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/catalog/brands/{brand_id}/image");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "brand_id", brandId }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Delete(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 