/*
 * BigCommerceAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 04/27/2020
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using BigCommerceAPI.PCL;
using BigCommerceAPI.PCL.Utilities;

namespace BigCommerceAPI.PCL.Models
{
    public class Brand : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private int? id;
        private string imageUrl;
        private string metaDescription;
        private List<string> metaKeywords;
        private string name;
        private string pageTitle;
        private string searchKeywords;

        /// <summary>
        /// The unique numeric ID of the brand, increments sequentially.
        /// </summary>
        [JsonProperty("id")]
        public int? Id 
        { 
            get 
            {
                return this.id; 
            } 
            set 
            {
                this.id = value;
                onPropertyChanged("Id");
            }
        }

        /// <summary>
        /// A valid image
        /// </summary>
        [JsonProperty("image_url")]
        public string ImageUrl 
        { 
            get 
            {
                return this.imageUrl; 
            } 
            set 
            {
                this.imageUrl = value;
                onPropertyChanged("ImageUrl");
            }
        }

        /// <summary>
        /// A meta description to include
        /// </summary>
        [JsonProperty("meta_description")]
        public string MetaDescription 
        { 
            get 
            {
                return this.metaDescription; 
            } 
            set 
            {
                this.metaDescription = value;
                onPropertyChanged("MetaDescription");
            }
        }

        /// <summary>
        /// Comma separated list of meta keywords to include in the HTML
        /// </summary>
        [JsonProperty("meta_keywords")]
        public List<string> MetaKeywords 
        { 
            get 
            {
                return this.metaKeywords; 
            } 
            set 
            {
                this.metaKeywords = value;
                onPropertyChanged("MetaKeywords");
            }
        }

        /// <summary>
        /// The name of the brand. Must be unique
        /// </summary>
        [JsonProperty("name")]
        public string Name 
        { 
            get 
            {
                return this.name; 
            } 
            set 
            {
                this.name = value;
                onPropertyChanged("Name");
            }
        }

        /// <summary>
        /// The title shown in the browser while viewing the brand
        /// </summary>
        [JsonProperty("page_title")]
        public string PageTitle 
        { 
            get 
            {
                return this.pageTitle; 
            } 
            set 
            {
                this.pageTitle = value;
                onPropertyChanged("PageTitle");
            }
        }

        /// <summary>
        /// A comma separated list of keywords that can be used to locate this brand
        /// </summary>
        [JsonProperty("search_keywords")]
        public string SearchKeywords 
        { 
            get 
            {
                return this.searchKeywords; 
            } 
            set 
            {
                this.searchKeywords = value;
                onPropertyChanged("SearchKeywords");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 