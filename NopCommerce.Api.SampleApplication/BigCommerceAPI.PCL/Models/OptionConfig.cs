/*
 * BigCommerceAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 04/27/2020
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using BigCommerceAPI.PCL;
using BigCommerceAPI.PCL.Utilities;

namespace BigCommerceAPI.PCL.Models
{
    public class OptionConfig : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private string checkboxLabel;
        private bool? checkedByDefault;
        private DateTime? dateEarliestValue;
        private DateTime? dateLatestValue;
        private DateLimitModeEnum? dateLimitMode;
        private bool? dateLimited;
        private string defaultValue;
        private int? fileMaxSize;
        private FileTypesModeEnum? fileTypesMode;
        private List<string> fileTypesOther;
        private List<string> fileTypesSupported;
        private double? numberHighestValue;
        private bool? numberIntegersOnly;
        private NumberLimitModeEnum? numberLimitMode;
        private bool? numberLimited;
        private double? numberLowestValue;
        private bool? productListAdjustsInventory;
        private bool? productListAdjustsPricing;
        private object productListShippingCalc;
        private bool? textCharactersLimited;
        private bool? textLinesLimited;
        private int? textMaxLength;
        private int? textMaxLines;
        private int? textMinLength;

        /// <summary>
        /// (checkbox) Label displayed for the checkbox option.
        /// </summary>
        [JsonProperty("checkbox_label")]
        public string CheckboxLabel 
        { 
            get 
            {
                return this.checkboxLabel; 
            } 
            set 
            {
                this.checkboxLabel = value;
                onPropertyChanged("CheckboxLabel");
            }
        }

        /// <summary>
        /// (checkbox) Flag for setting the check box to be checked by default.
        /// </summary>
        [JsonProperty("checked_by_default")]
        public bool? CheckedByDefault 
        { 
            get 
            {
                return this.checkedByDefault; 
            } 
            set 
            {
                this.checkedByDefault = value;
                onPropertyChanged("CheckedByDefault");
            }
        }

        /// <summary>
        /// (date) The earliest date allowed to be entered on the date option as an ISO-8601 formatted string.
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("date_earliest_value")]
        public DateTime? DateEarliestValue 
        { 
            get 
            {
                return this.dateEarliestValue; 
            } 
            set 
            {
                this.dateEarliestValue = value;
                onPropertyChanged("DateEarliestValue");
            }
        }

        /// <summary>
        /// (date) The latest date allowed to be entered on the date option as an ISO-8601 formatted string.
        /// </summary>
        [JsonConverter(typeof(IsoDateTimeConverter))]
        [JsonProperty("date_latest_value")]
        public DateTime? DateLatestValue 
        { 
            get 
            {
                return this.dateLatestValue; 
            } 
            set 
            {
                this.dateLatestValue = value;
                onPropertyChanged("DateLatestValue");
            }
        }

        /// <summary>
        /// (date) The type of limit that is allowed to be entered on a date option (`earliest`, `range`, `latest`).
        /// </summary>
        [JsonProperty("date_limit_mode", ItemConverterType = typeof(StringValuedEnumConverter))]
        public DateLimitModeEnum? DateLimitMode 
        { 
            get 
            {
                return this.dateLimitMode; 
            } 
            set 
            {
                this.dateLimitMode = value;
                onPropertyChanged("DateLimitMode");
            }
        }

        /// <summary>
        /// (date) Flag to limit the date allowed to be entered on a date option.
        /// </summary>
        [JsonProperty("date_limited")]
        public bool? DateLimited 
        { 
            get 
            {
                return this.dateLimited; 
            } 
            set 
            {
                this.dateLimited = value;
                onPropertyChanged("DateLimited");
            }
        }

        /// <summary>
        /// (date, text, multi_line_text, numbers_only_text) The default value shown on a date option as an ISO-8601 formatted string or text option as a string.
        /// </summary>
        [JsonProperty("default_value")]
        public string DefaultValue 
        { 
            get 
            {
                return this.defaultValue; 
            } 
            set 
            {
                this.defaultValue = value;
                onPropertyChanged("DefaultValue");
            }
        }

        /// <summary>
        /// (file) The maximum size of the file that can be used in the file upload option.
        /// </summary>
        [JsonProperty("file_max_size")]
        public int? FileMaxSize 
        { 
            get 
            {
                return this.fileMaxSize; 
            } 
            set 
            {
                this.fileMaxSize = value;
                onPropertyChanged("FileMaxSize");
            }
        }

        /// <summary>
        /// (file) The kind of restriction on the type of files that can be uploaded to a file upload option.
        ///   `specific` - restricts upload to particular file types.
        ///   `all` - allows all files types.
        /// </summary>
        [JsonProperty("file_types_mode", ItemConverterType = typeof(StringValuedEnumConverter))]
        public FileTypesModeEnum? FileTypesMode 
        { 
            get 
            {
                return this.fileTypesMode; 
            } 
            set 
            {
                this.fileTypesMode = value;
                onPropertyChanged("FileTypesMode");
            }
        }

        /// <summary>
        /// (file) A list of other files types allowed with the file upload option.
        /// </summary>
        [JsonProperty("file_types_other")]
        public List<string> FileTypesOther 
        { 
            get 
            {
                return this.fileTypesOther; 
            } 
            set 
            {
                this.fileTypesOther = value;
                onPropertyChanged("FileTypesOther");
            }
        }

        /// <summary>
        /// (file) The kind of files allowed to be uploaded if the `file_type_option` is set to `specific`.
        ///   `images` - Allows upload of image MIME types (`bmp`,`gif`,`jpg`,`jpeg`,`jpe`,`jif`,`jfif`,`jfi`,`png`,`wbmp`,`xbm`,`tiff`).
        ///   `documents` - Allows upload of document MIME types (`txt`,`pdf`,`rtf`,`doc`,`docx`,`xls`,`xlsx`,`accdb`,`mdb`,`one`,`pps`,`ppsx`,`ppt`,`pptx`,`pub`,`odt`,`ods`,`odp`,`odg`,`odf`).
        ///   `other` - Allows other file type defined in the `file_types_other` array.
        /// </summary>
        [JsonProperty("file_types_supported")]
        public List<string> FileTypesSupported 
        { 
            get 
            {
                return this.fileTypesSupported; 
            } 
            set 
            {
                this.fileTypesSupported = value;
                onPropertyChanged("FileTypesSupported");
            }
        }

        /// <summary>
        /// (numbers_only_text) The highest allowed value for a number option if `limit_input` is true.
        /// </summary>
        [JsonProperty("number_highest_value")]
        public double? NumberHighestValue 
        { 
            get 
            {
                return this.numberHighestValue; 
            } 
            set 
            {
                this.numberHighestValue = value;
                onPropertyChanged("NumberHighestValue");
            }
        }

        /// <summary>
        /// (numbers_only_text) Flag to limit the imput on a number option to only accept whole numbers.
        /// </summary>
        [JsonProperty("number_integers_only")]
        public bool? NumberIntegersOnly 
        { 
            get 
            {
                return this.numberIntegersOnly; 
            } 
            set 
            {
                this.numberIntegersOnly = value;
                onPropertyChanged("NumberIntegersOnly");
            }
        }

        /// <summary>
        /// (numbers_only_text) The type of limit that is allowed to be entered on a number option (`lowest`, `highest`, `range`).
        /// </summary>
        [JsonProperty("number_limit_mode", ItemConverterType = typeof(StringValuedEnumConverter))]
        public NumberLimitModeEnum? NumberLimitMode 
        { 
            get 
            {
                return this.numberLimitMode; 
            } 
            set 
            {
                this.numberLimitMode = value;
                onPropertyChanged("NumberLimitMode");
            }
        }

        /// <summary>
        /// (numbers_only_text) Flag to limit the value of a number option.
        /// </summary>
        [JsonProperty("number_limited")]
        public bool? NumberLimited 
        { 
            get 
            {
                return this.numberLimited; 
            } 
            set 
            {
                this.numberLimited = value;
                onPropertyChanged("NumberLimited");
            }
        }

        /// <summary>
        /// (numbers_only_text) The lowest allowed value for a number option if `limit_input` is true.
        /// </summary>
        [JsonProperty("number_lowest_value")]
        public double? NumberLowestValue 
        { 
            get 
            {
                return this.numberLowestValue; 
            } 
            set 
            {
                this.numberLowestValue = value;
                onPropertyChanged("NumberLowestValue");
            }
        }

        /// <summary>
        /// (product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.
        /// </summary>
        [JsonProperty("product_list_adjusts_inventory")]
        public bool? ProductListAdjustsInventory 
        { 
            get 
            {
                return this.productListAdjustsInventory; 
            } 
            set 
            {
                this.productListAdjustsInventory = value;
                onPropertyChanged("ProductListAdjustsInventory");
            }
        }

        /// <summary>
        /// (product_list, product_list_with_images) Flag to add the price of the optional product to the price of the main product
        /// </summary>
        [JsonProperty("product_list_adjusts_pricing")]
        public bool? ProductListAdjustsPricing 
        { 
            get 
            {
                return this.productListAdjustsPricing; 
            } 
            set 
            {
                this.productListAdjustsPricing = value;
                onPropertyChanged("ProductListAdjustsPricing");
            }
        }

        /// <summary>
        /// (product_list, product_list_with_images)  How to factor the optional product's weight and dimensions (package) into the shipping quote (none - don't adjust, weight - use shipping weight only, package - use package, weight and dimensions)
        /// </summary>
        [JsonProperty("product_list_shipping_calc")]
        public object ProductListShippingCalc 
        { 
            get 
            {
                return this.productListShippingCalc; 
            } 
            set 
            {
                this.productListShippingCalc = value;
                onPropertyChanged("ProductListShippingCalc");
            }
        }

        /// <summary>
        /// (text, multi_line_text) Flag to validate the length of the text of a text or multi-line text input.
        /// </summary>
        [JsonProperty("text_characters_limited")]
        public bool? TextCharactersLimited 
        { 
            get 
            {
                return this.textCharactersLimited; 
            } 
            set 
            {
                this.textCharactersLimited = value;
                onPropertyChanged("TextCharactersLimited");
            }
        }

        /// <summary>
        /// (multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.
        /// </summary>
        [JsonProperty("text_lines_limited")]
        public bool? TextLinesLimited 
        { 
            get 
            {
                return this.textLinesLimited; 
            } 
            set 
            {
                this.textLinesLimited = value;
                onPropertyChanged("TextLinesLimited");
            }
        }

        /// <summary>
        /// (text, multi_line_text) The maximum length allowed for a text or multi line text option.
        /// </summary>
        [JsonProperty("text_max_length")]
        public int? TextMaxLength 
        { 
            get 
            {
                return this.textMaxLength; 
            } 
            set 
            {
                this.textMaxLength = value;
                onPropertyChanged("TextMaxLength");
            }
        }

        /// <summary>
        /// (multi_line_text) The maximum number of lines allowed on a multi-line text input.
        /// </summary>
        [JsonProperty("text_max_lines")]
        public int? TextMaxLines 
        { 
            get 
            {
                return this.textMaxLines; 
            } 
            set 
            {
                this.textMaxLines = value;
                onPropertyChanged("TextMaxLines");
            }
        }

        /// <summary>
        /// (text, multi_line_text) The minimum length allowed for a text or multi-line text option.
        /// </summary>
        [JsonProperty("text_min_length")]
        public int? TextMinLength 
        { 
            get 
            {
                return this.textMinLength; 
            } 
            set 
            {
                this.textMinLength = value;
                onPropertyChanged("TextMinLength");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 