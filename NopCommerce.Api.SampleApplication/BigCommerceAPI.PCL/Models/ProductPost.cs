/*
 * BigCommerceAPI.PCL
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 04/27/2020
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using BigCommerceAPI.PCL;
using BigCommerceAPI.PCL.Utilities;

namespace BigCommerceAPI.PCL.Models
{
    public class ProductPost : INotifyPropertyChanged 
    {
        // These fields hold the values for the public properties.
        private AvailabilityEnum? availability;
        private string availabilityDescription;
        private string binPickingNumber;
        private int? brandId;
        private List<BulkPricingRule> bulkPricingRules;
        private double? calculatedPrice;
        private List<int> categories;
        private string condition;
        private double? costPrice;
        private List<CustomField> customFields;
        private CustomUrl customUrl;
        private string dateCreated;
        private string dateModified;
        private double? depth;
        private string description;
        private int? fixedCostShippingPrice;
        private List<int> giftWrappingOptions;
        private double? height;
        private int? id;
        private List<ProductImage> images;
        private int? inventoryLevel;
        private InventoryTrackingEnum? inventoryTracking;
        private int? inventoryWarningLevel;
        private bool? isConditionShown;
        private bool? isFeatured;
        private bool? isFreeShipping;
        private bool? isPreorderOnly;
        private bool? isPriceHidden;
        private bool? isVisible;
        private string layoutFile;
        private string metaDescription;
        private List<string> metaKeywords;
        private string name;
        private int? orderQuantityMaximum;
        private int? orderQuantityMinimum;
        private string pageTitle;
        private string preorderMessage;
        private string preorderReleaseDate;
        private double? price;
        private string priceHiddenLabel;
        private string productTaxCode;
        private double? retailPrice;
        private double? salePrice;
        private string searchKeywords;
        private string sku;
        private int? sortOrder;
        private int? taxClassId;
        private TypeEnum? type;
        private string upc;
        private List<Variant> variants;
        private int? viewCount;
        private string warranty;
        private double? weight;
        private double? width;

        /// <summary>
        /// Availability of the product. availability options: available - The product can be purchased in the store front. disabled - The product is listed in the store front but can not be purchased. preorder - The product is listed for pre-orders.
        /// </summary>
        [JsonProperty("availability", ItemConverterType = typeof(StringValuedEnumConverter))]
        public AvailabilityEnum? Availability 
        { 
            get 
            {
                return this.availability; 
            } 
            set 
            {
                this.availability = value;
                onPropertyChanged("Availability");
            }
        }

        /// <summary>
        /// Availability text displayed on the checkout page under the product title telling the customer how long it will normally take to ship this product, such as 'Usually ships in 24 hours'.
        /// </summary>
        [JsonProperty("availability_description")]
        public string AvailabilityDescription 
        { 
            get 
            {
                return this.availabilityDescription; 
            } 
            set 
            {
                this.availabilityDescription = value;
                onPropertyChanged("AvailabilityDescription");
            }
        }

        /// <summary>
        /// The BIN picking number for the product.
        /// </summary>
        [JsonProperty("bin_picking_number")]
        public string BinPickingNumber 
        { 
            get 
            {
                return this.binPickingNumber; 
            } 
            set 
            {
                this.binPickingNumber = value;
                onPropertyChanged("BinPickingNumber");
            }
        }

        /// <summary>
        /// The id associated with the product's brand.
        /// </summary>
        [JsonProperty("brand_id")]
        public int? BrandId 
        { 
            get 
            {
                return this.brandId; 
            } 
            set 
            {
                this.brandId = value;
                onPropertyChanged("BrandId");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("bulk_pricing_rules")]
        public List<BulkPricingRule> BulkPricingRules 
        { 
            get 
            {
                return this.bulkPricingRules; 
            } 
            set 
            {
                this.bulkPricingRules = value;
                onPropertyChanged("BulkPricingRules");
            }
        }

        /// <summary>
        /// The price of the product unless a sale_price is set.
        /// </summary>
        [JsonProperty("calculated_price")]
        public double? CalculatedPrice 
        { 
            get 
            {
                return this.calculatedPrice; 
            } 
            set 
            {
                this.calculatedPrice = value;
                onPropertyChanged("CalculatedPrice");
            }
        }

        /// <summary>
        /// An array of IDs for the categories this product belongs to. When updating a product, if an array of categories is supplied all product categories will be overwritten. Does not accept more than 1,000 ID values.
        /// </summary>
        [JsonProperty("categories")]
        public List<int> Categories 
        { 
            get 
            {
                return this.categories; 
            } 
            set 
            {
                this.categories = value;
                onPropertyChanged("Categories");
            }
        }

        /// <summary>
        /// The product condition, will be shown on the product page if the value of the 'is_condition_shown' field is true. Possible values: New, Used, Refurbished
        /// </summary>
        [JsonProperty("condition")]
        public string Condition 
        { 
            get 
            {
                return this.condition; 
            } 
            set 
            {
                this.condition = value;
                onPropertyChanged("Condition");
            }
        }

        /// <summary>
        /// he cost price of the product, stored for reference only, it is not used or displayed anywhere on the store.
        /// </summary>
        [JsonProperty("cost_price")]
        public double? CostPrice 
        { 
            get 
            {
                return this.costPrice; 
            } 
            set 
            {
                this.costPrice = value;
                onPropertyChanged("CostPrice");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("custom_fields")]
        public List<CustomField> CustomFields 
        { 
            get 
            {
                return this.customFields; 
            } 
            set 
            {
                this.customFields = value;
                onPropertyChanged("CustomFields");
            }
        }

        /// <summary>
        /// The custom url for the product on the store front.
        /// </summary>
        [JsonProperty("custom_url")]
        public CustomUrl CustomUrl 
        { 
            get 
            {
                return this.customUrl; 
            } 
            set 
            {
                this.customUrl = value;
                onPropertyChanged("CustomUrl");
            }
        }

        /// <summary>
        /// The date of which the product was created.
        /// </summary>
        [JsonProperty("date_created")]
        public string DateCreated 
        { 
            get 
            {
                return this.dateCreated; 
            } 
            set 
            {
                this.dateCreated = value;
                onPropertyChanged("DateCreated");
            }
        }

        /// <summary>
        /// The date of which the product was created.
        /// </summary>
        [JsonProperty("date_modified")]
        public string DateModified 
        { 
            get 
            {
                return this.dateModified; 
            } 
            set 
            {
                this.dateModified = value;
                onPropertyChanged("DateModified");
            }
        }

        /// <summary>
        /// Depth of the product used which can be used when calculating shipping costs.
        /// </summary>
        [JsonProperty("depth")]
        public double? Depth 
        { 
            get 
            {
                return this.depth; 
            } 
            set 
            {
                this.depth = value;
                onPropertyChanged("Depth");
            }
        }

        /// <summary>
        /// The product description which can include HTML formatting.
        /// </summary>
        [JsonProperty("description")]
        public string Description 
        { 
            get 
            {
                return this.description; 
            } 
            set 
            {
                this.description = value;
                onPropertyChanged("Description");
            }
        }

        /// <summary>
        /// A fixed shipping cost for the product, if defined the value will be used during checkout instead of normal shipping cost calculation.
        /// </summary>
        [JsonProperty("fixed_cost_shipping_price")]
        public int? FixedCostShippingPrice 
        { 
            get 
            {
                return this.fixedCostShippingPrice; 
            } 
            set 
            {
                this.fixedCostShippingPrice = value;
                onPropertyChanged("FixedCostShippingPrice");
            }
        }

        /// <summary>
        /// A list of gift wrapping option ids, 0 (allow any gift wrapping options in the store), or -1 to disallow gift wrapping on the product.
        /// </summary>
        [JsonProperty("gift_wrapping_options")]
        public List<int> GiftWrappingOptions 
        { 
            get 
            {
                return this.giftWrappingOptions; 
            } 
            set 
            {
                this.giftWrappingOptions = value;
                onPropertyChanged("GiftWrappingOptions");
            }
        }

        /// <summary>
        /// Height of the product used which can be used when calculating shipping costs.
        /// </summary>
        [JsonProperty("height")]
        public double? Height 
        { 
            get 
            {
                return this.height; 
            } 
            set 
            {
                this.height = value;
                onPropertyChanged("Height");
            }
        }

        /// <summary>
        /// The unique numeric ID of the product; increments sequentially.
        /// </summary>
        [JsonProperty("id")]
        public int? Id 
        { 
            get 
            {
                return this.id; 
            } 
            set 
            {
                this.id = value;
                onPropertyChanged("Id");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("images")]
        public List<ProductImage> Images 
        { 
            get 
            {
                return this.images; 
            } 
            set 
            {
                this.images = value;
                onPropertyChanged("Images");
            }
        }

        /// <summary>
        /// Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.
        /// </summary>
        [JsonProperty("inventory_level")]
        public int? InventoryLevel 
        { 
            get 
            {
                return this.inventoryLevel; 
            } 
            set 
            {
                this.inventoryLevel = value;
                onPropertyChanged("InventoryLevel");
            }
        }

        /// <summary>
        /// The type of inventory tracking for the product: none - inventory levels will not be tracked. product - inventory levels will be tracked using the 'inventory_level' and 'inventory_warning_level' fields. variant - inventory levels will be tracked based on  variants which maintain their own warning levels and inventory levels.
        /// </summary>
        [JsonProperty("inventory_tracking", ItemConverterType = typeof(StringValuedEnumConverter))]
        public InventoryTrackingEnum? InventoryTracking 
        { 
            get 
            {
                return this.inventoryTracking; 
            } 
            set 
            {
                this.inventoryTracking = value;
                onPropertyChanged("InventoryTracking");
            }
        }

        /// <summary>
        /// Inventory Warning level for the product. When the products inventory level drops below the warning level the store owner will be informed. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.
        /// </summary>
        [JsonProperty("inventory_warning_level")]
        public int? InventoryWarningLevel 
        { 
            get 
            {
                return this.inventoryWarningLevel; 
            } 
            set 
            {
                this.inventoryWarningLevel = value;
                onPropertyChanged("InventoryWarningLevel");
            }
        }

        /// <summary>
        /// Flag used to determine if the product condition is shown to the customer on the product page.
        /// </summary>
        [JsonProperty("is_condition_shown")]
        public bool? IsConditionShown 
        { 
            get 
            {
                return this.isConditionShown; 
            } 
            set 
            {
                this.isConditionShown = value;
                onPropertyChanged("IsConditionShown");
            }
        }

        /// <summary>
        /// Flag to determine if the product should be included in 'featured products' panel when viewing the store.
        /// </summary>
        [JsonProperty("is_featured")]
        public bool? IsFeatured 
        { 
            get 
            {
                return this.isFeatured; 
            } 
            set 
            {
                this.isFeatured = value;
                onPropertyChanged("IsFeatured");
            }
        }

        /// <summary>
        /// Flag used to indicate if the product has free shipping or not. If true the shipping cost for the product will be zero.
        /// </summary>
        [JsonProperty("is_free_shipping")]
        public bool? IsFreeShipping 
        { 
            get 
            {
                return this.isFreeShipping; 
            } 
            set 
            {
                this.isFreeShipping = value;
                onPropertyChanged("IsFreeShipping");
            }
        }

        /// <summary>
        /// If set to false, the product will not change its availability from preorder to available on the release date. Otherwise on the release date the products availability/status will change to available.
        /// </summary>
        [JsonProperty("is_preorder_only")]
        public bool? IsPreorderOnly 
        { 
            get 
            {
                return this.isPreorderOnly; 
            } 
            set 
            {
                this.isPreorderOnly = value;
                onPropertyChanged("IsPreorderOnly");
            }
        }

        /// <summary>
        /// False by default, which indicates that the price of this product should be shown on the product page. If set to 'true', the price is hidden. NOTE: To successfully set 'is_price_hidden' to 'true', the 'availability' value must be 'disabled'.
        /// </summary>
        [JsonProperty("is_price_hidden")]
        public bool? IsPriceHidden 
        { 
            get 
            {
                return this.isPriceHidden; 
            } 
            set 
            {
                this.isPriceHidden = value;
                onPropertyChanged("IsPriceHidden");
            }
        }

        /// <summary>
        /// Flag to determine if the product should be displayed to customers browsing the store or not. If true the product will be displayed, false the product will be hidden from view.
        /// </summary>
        [JsonProperty("is_visible")]
        public bool? IsVisible 
        { 
            get 
            {
                return this.isVisible; 
            } 
            set 
            {
                this.isVisible = value;
                onPropertyChanged("IsVisible");
            }
        }

        /// <summary>
        /// The layout template file used to render this product.
        /// </summary>
        [JsonProperty("layout_file")]
        public string LayoutFile 
        { 
            get 
            {
                return this.layoutFile; 
            } 
            set 
            {
                this.layoutFile = value;
                onPropertyChanged("LayoutFile");
            }
        }

        /// <summary>
        /// Custom meta description for the product page, if not defined the store default meta description will be used.
        /// </summary>
        [JsonProperty("meta_description")]
        public string MetaDescription 
        { 
            get 
            {
                return this.metaDescription; 
            } 
            set 
            {
                this.metaDescription = value;
                onPropertyChanged("MetaDescription");
            }
        }

        /// <summary>
        /// Custom meta keywords for the product page, if not defined the store default keywords will be used.
        /// </summary>
        [JsonProperty("meta_keywords")]
        public List<string> MetaKeywords 
        { 
            get 
            {
                return this.metaKeywords; 
            } 
            set 
            {
                this.metaKeywords = value;
                onPropertyChanged("MetaKeywords");
            }
        }

        /// <summary>
        /// The product name.
        /// </summary>
        [JsonProperty("name")]
        public string Name 
        { 
            get 
            {
                return this.name; 
            } 
            set 
            {
                this.name = value;
                onPropertyChanged("Name");
            }
        }

        /// <summary>
        /// The maximum quantity an order can contain when purchasing the product.
        /// </summary>
        [JsonProperty("order_quantity_maximum")]
        public int? OrderQuantityMaximum 
        { 
            get 
            {
                return this.orderQuantityMaximum; 
            } 
            set 
            {
                this.orderQuantityMaximum = value;
                onPropertyChanged("OrderQuantityMaximum");
            }
        }

        /// <summary>
        /// The minimum quantity an order has to contain to be able to purchase this product.
        /// </summary>
        [JsonProperty("order_quantity_minimum")]
        public int? OrderQuantityMinimum 
        { 
            get 
            {
                return this.orderQuantityMinimum; 
            } 
            set 
            {
                this.orderQuantityMinimum = value;
                onPropertyChanged("OrderQuantityMinimum");
            }
        }

        /// <summary>
        /// Custom title for the products page, if not defined the product name will be used as the meta title.
        /// </summary>
        [JsonProperty("page_title")]
        public string PageTitle 
        { 
            get 
            {
                return this.pageTitle; 
            } 
            set 
            {
                this.pageTitle = value;
                onPropertyChanged("PageTitle");
            }
        }

        /// <summary>
        /// Custom expected date message to display on the product page, if undefined the message defaults to the store wide setting. Can contain the %%DATE%% place holder which will be substituted for the release date
        /// </summary>
        [JsonProperty("preorder_message")]
        public string PreorderMessage 
        { 
            get 
            {
                return this.preorderMessage; 
            } 
            set 
            {
                this.preorderMessage = value;
                onPropertyChanged("PreorderMessage");
            }
        }

        /// <summary>
        /// Pre-order release date. See availability field for details on setting a products availability to accept pre-orders.
        /// </summary>
        [JsonProperty("preorder_release_date")]
        public string PreorderReleaseDate 
        { 
            get 
            {
                return this.preorderReleaseDate; 
            } 
            set 
            {
                this.preorderReleaseDate = value;
                onPropertyChanged("PreorderReleaseDate");
            }
        }

        /// <summary>
        /// The price of the product, the price should include or exclude tax based on the store settings.
        /// </summary>
        [JsonProperty("price")]
        public double? Price 
        { 
            get 
            {
                return this.price; 
            } 
            set 
            {
                this.price = value;
                onPropertyChanged("Price");
            }
        }

        /// <summary>
        /// By default, an empty string. If 'is_price_hidden' is 'true', the value of 'price_hidden_label' is displayed instead of the price. NOTE: To successfully set a non-empty string value for 'is_price_hidden' to 'true', the 'availability' value must be 'disabled'.
        /// </summary>
        [JsonProperty("price_hidden_label")]
        public string PriceHiddenLabel 
        { 
            get 
            {
                return this.priceHiddenLabel; 
            } 
            set 
            {
                this.priceHiddenLabel = value;
                onPropertyChanged("PriceHiddenLabel");
            }
        }

        /// <summary>
        /// Accepts AvaTax system codes that identify products and services that fall into special sales tax categories. Allows merchants that subscribe to Avalara Premium to achieve increased accuracy in sales tax calculations. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. Refer to the 'AvaTax System tax codes' section of the following page for further information and the full list of codes: https://help.avalara.com/000_AvaTax_Calc/000AvaTaxCalc_User_Guide/040_Managing_Tax_Profiles/050_Tax_Codes/001_What_is_a_Tax_Code
        /// </summary>
        [JsonProperty("product_tax_code")]
        public string ProductTaxCode 
        { 
            get 
            {
                return this.productTaxCode; 
            } 
            set 
            {
                this.productTaxCode = value;
                onPropertyChanged("ProductTaxCode");
            }
        }

        /// <summary>
        /// The retail cost of the product, if entered the retail cost price will be shown on the product page.
        /// </summary>
        [JsonProperty("retail_price")]
        public double? RetailPrice 
        { 
            get 
            {
                return this.retailPrice; 
            } 
            set 
            {
                this.retailPrice = value;
                onPropertyChanged("RetailPrice");
            }
        }

        /// <summary>
        /// The sale price will be used instead of value in the price field when calculating the products cost if entered.
        /// </summary>
        [JsonProperty("sale_price")]
        public double? SalePrice 
        { 
            get 
            {
                return this.salePrice; 
            } 
            set 
            {
                this.salePrice = value;
                onPropertyChanged("SalePrice");
            }
        }

        /// <summary>
        /// A comma separated list of keywords that can be used to locate the product when searching the store.
        /// </summary>
        [JsonProperty("search_keywords")]
        public string SearchKeywords 
        { 
            get 
            {
                return this.searchKeywords; 
            } 
            set 
            {
                this.searchKeywords = value;
                onPropertyChanged("SearchKeywords");
            }
        }

        /// <summary>
        /// User defined product code/stock keeping unit (SKU).
        /// </summary>
        [JsonProperty("sku")]
        public string Sku 
        { 
            get 
            {
                return this.sku; 
            } 
            set 
            {
                this.sku = value;
                onPropertyChanged("Sku");
            }
        }

        /// <summary>
        /// Priority this product will be given when included in product lists on category pages and search results. The lower the number, the closer to the top of the results the product will be.
        /// </summary>
        [JsonProperty("sort_order")]
        public int? SortOrder 
        { 
            get 
            {
                return this.sortOrder; 
            } 
            set 
            {
                this.sortOrder = value;
                onPropertyChanged("SortOrder");
            }
        }

        /// <summary>
        /// The ID of the tax class applied to the product. NOTE: Value ignored if automatic tax is enabled.
        /// </summary>
        [JsonProperty("tax_class_id")]
        public int? TaxClassId 
        { 
            get 
            {
                return this.taxClassId; 
            } 
            set 
            {
                this.taxClassId = value;
                onPropertyChanged("TaxClassId");
            }
        }

        /// <summary>
        /// The product type: physical - a physical stock unit, digital - a digital download
        /// </summary>
        [JsonProperty("type", ItemConverterType = typeof(StringValuedEnumConverter))]
        public TypeEnum? Type 
        { 
            get 
            {
                return this.type; 
            } 
            set 
            {
                this.type = value;
                onPropertyChanged("Type");
            }
        }

        /// <summary>
        /// The product UPC code which is used in feeds for shopping comparison sites and external channel integrations.
        /// </summary>
        [JsonProperty("upc")]
        public string Upc 
        { 
            get 
            {
                return this.upc; 
            } 
            set 
            {
                this.upc = value;
                onPropertyChanged("Upc");
            }
        }

        /// <summary>
        /// TODO: Write general description for this method
        /// </summary>
        [JsonProperty("variants")]
        public List<Variant> Variants 
        { 
            get 
            {
                return this.variants; 
            } 
            set 
            {
                this.variants = value;
                onPropertyChanged("Variants");
            }
        }

        /// <summary>
        /// The number of times the product has been viewed.
        /// </summary>
        [JsonProperty("view_count")]
        public int? ViewCount 
        { 
            get 
            {
                return this.viewCount; 
            } 
            set 
            {
                this.viewCount = value;
                onPropertyChanged("ViewCount");
            }
        }

        /// <summary>
        /// Warranty information displayed on the product page which can include HTML formatting.
        /// </summary>
        [JsonProperty("warranty")]
        public string Warranty 
        { 
            get 
            {
                return this.warranty; 
            } 
            set 
            {
                this.warranty = value;
                onPropertyChanged("Warranty");
            }
        }

        /// <summary>
        /// Weight of the product used which can be used when calculating shipping costs.
        /// </summary>
        [JsonProperty("weight")]
        public double? Weight 
        { 
            get 
            {
                return this.weight; 
            } 
            set 
            {
                this.weight = value;
                onPropertyChanged("Weight");
            }
        }

        /// <summary>
        /// Width of the product used which can be used when calculating shipping costs.
        /// </summary>
        [JsonProperty("width")]
        public double? Width 
        { 
            get 
            {
                return this.width; 
            } 
            set 
            {
                this.width = value;
                onPropertyChanged("Width");
            }
        }

        /// <summary>
        /// Property changed event for observer pattern
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Raises event when a property is changed
        /// </summary>
        /// <param name="propertyName">Name of the changed property</param>
        protected void onPropertyChanged(String propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
} 